"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","angularjs-dropdown-multiselect"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("abouts"),ApplicationConfiguration.registerModule("analytics"),ApplicationConfiguration.registerModule("announcements"),ApplicationConfiguration.registerModule("chat"),ApplicationConfiguration.registerModule("contacts"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("app"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("docs"),ApplicationConfiguration.registerModule("feedback"),ApplicationConfiguration.registerModule("saved-docs"),ApplicationConfiguration.registerModule("tags"),ApplicationConfiguration.registerModule("topics"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("abouts").config(["$stateProvider",function($stateProvider){}]),angular.module("abouts").controller("AboutsController",["$scope","$stateParams","$location","Authentication","Abouts",function($scope,$stateParams,$location,Authentication,Abouts){$scope.authentication=Authentication,$scope.abouts=Abouts.query(),$scope.create=function(){var about=new Abouts({text:this.text});about.$save(function(response){$location.path("abouts/"+response._id),$scope.text=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(about){if(about){about.$remove();for(var i in $scope.abouts)$scope.abouts[i]===about&&$scope.abouts.splice(i,1)}else $scope.about.$remove(function(){$location.path("abouts")})},$scope.update=function(thisAbout){thisAbout.$update(function(){$location.path("/")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findOne=function(){$scope.about=Abouts.get({aboutId:$stateParams.aboutId})}}]),angular.module("abouts").factory("Abouts",["$resource",function($resource){return $resource("api/abouts/:aboutId",{aboutId:"@_id"},{update:{method:"PUT"}})}]),angular.module("analytics").config(["$stateProvider",function($stateProvider){}]),angular.module("analytics").controller("AnalyticsController",["$scope","$stateParams","$location","Authentication","Analytics","$rootScope","Service",function($scope,$stateParams,$location,Authentication,Analytics,$rootScope,Service){$scope.authentication=Authentication,$scope.create=function(doc_id,docTitle,docTags){var analytic=new Analytics({doc:doc_id,title:docTitle,tags:docTags});console.log(doc_id),console.log(docTitle),console.log(docTags),analytic.$save(function(response){console.log("Created"),$scope.doc="",$scope.title="",$scope.tags=[]},function(errorResponse){$scope.error=errorResponse.data.message,console.log("Error: "+$scope.error)})},$scope.remove=function(analytic){if(analytic){analytic.$remove();for(var i in $scope.analytics)$scope.analytics[i]===analytic&&$scope.analytics.splice(i,1)}else $scope.analytic.$remove(function(){$location.path("analytics")})},$scope.update=function(){var analytic=$scope.analytic;analytic.$update(function(){$location.path("analytics/"+analytic._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.analytics=Analytics.query()},$scope.findOne=function(){$scope.analytic=Analytics.get({analyticId:$stateParams.analyticId})}}]),angular.module("analytics").factory("Analytics",["$resource",function($resource){return $resource("api/analytics/:analyticId",{analyticId:"@_id"},{update:{method:"PUT"}})}]),angular.module("announcements").config(["$stateProvider",function($stateProvider){$stateProvider.state("announcements",{"abstract":!0,url:"/announcements",template:"<ui-view/>"}).state("announcements.list",{url:"",templateUrl:"modules/announcements/client/views/list-announcements.client.view.html"}).state("announcements.create",{url:"/create",templateUrl:"modules/announcements/client/views/create-announcement.client.view.html",data:{roles:["admin"]}}).state("announcements.view",{url:"/:announcementId",templateUrl:"modules/announcements/client/views/view-announcement.client.view.html"}).state("announcements.edit",{url:"/:announcementId/edit",templateUrl:"modules/announcements/client/views/edit-announcement.client.view.html",data:{roles:["admin"]}})}]),angular.module("announcements").controller("AnnouncementsController",["$scope","$stateParams","$location","Authentication","Announcements",function($scope,$stateParams,$location,Authentication,Announcements){$scope.authentication=Authentication,$scope.create=function(){var announcement=new Announcements({title:this.title,text:this.text});announcement.$save(function(response){$location.path("announcements/"+response._id),$scope.title="",$scope.text=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(announcement){if(announcement){announcement.$remove();for(var i in $scope.announcements)$scope.announcements[i]===announcement&&$scope.announcements.splice(i,1)}else $scope.announcement.$remove(function(){$location.path("announcements")})},$scope.update=function(){var announcement=$scope.announcement;announcement.$update(function(){$location.path("announcements/"+announcement._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.announcements=Announcements.query()},$scope.findOne=function(){$scope.announcement=Announcements.get({announcementId:$stateParams.announcementId})}}]),angular.module("announcements").factory("Announcements",["$resource",function($resource){return $resource("api/announcements/:announcementId",{announcementId:"@_id"},{update:{method:"PUT"}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket",function($scope,$location,Authentication,Socket){$scope.messages=[],Authentication.user||$location.path("/"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){$scope.messages.unshift(message)}),$scope.sendMessage=function(){var message={text:this.messageText};Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),angular.module("contacts").config(["$stateProvider",function($stateProvider){}]),angular.module("contacts").controller("ContactsController",["$scope","$stateParams","$location","Authentication","Contacts",function($scope,$stateParams,$location,Authentication,Contacts){$scope.authentication=Authentication,$scope.contacts=Contacts.query(),$scope.create=function(){var contact=new Contacts({text:this.text});contact.$save(function(response){$location.path("contacts/"+response._id),$scope.text=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(contact){if(contact){contact.$remove();for(var i in $scope.contacts)$scope.contacts[i]===contact&&$scope.contacts.splice(i,1)}else $scope.contact.$remove(function(){$location.path("contacts")})},$scope.update=function(thisContact){thisContact.$update(function(){$location.path("/")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findOne=function(){$scope.contact=Contacts.get({contactId:$stateParams.contactId})}}]),angular.module("contacts").factory("Contacts",["$resource",function($resource){return $resource("api/contacts/:contactId",{contactId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("health",{url:"/health",templateUrl:"modules/core/client/views/health.client.view.html"}).state("economy",{url:"/economy",templateUrl:"modules/core/client/views/economy.client.view.html"}).state("technology",{url:"/technology",templateUrl:"modules/core/client/views/technology.client.view.html"}).state("development",{url:"/development",templateUrl:"modules/core/client/views/development.client.view.html"}).state("environment",{url:"/environment",templateUrl:"modules/core/client/views/environment.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$rootScope","$state","Authentication","Menus","$location","Tags","Topics",function($scope,$state,$rootScope,Authentication,Menus,$location,Tags,Topics){$scope.$state=$state,$scope.authentication=Authentication,$rootScope.searchText=void 0,$scope.tags=Tags.query(function(){}),$scope.topics=Topics.query(function(){}),$scope.startsWith=function(state,viewValue){return"string"!=typeof state||state.toLowerCase().includes(">")||state.toLowerCase().includes("<")||state.toLowerCase().includes("unknown")?void 0:state.substr(0,viewValue.length).toLowerCase()===viewValue.toLowerCase()},$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.isActive=function(viewLocation){return viewLocation===$location.path()},$scope.goToResultsPage=function(){$location.path("/results")}}]),angular.module("core").controller("HomeController",["$scope","Authentication","Topics","Tags","Analytics","Announcements","Feedback",function($scope,Authentication,Topics,Tags,Analytics,Announcements,Feedback){$scope.authentication=Authentication}]),angular.module("app",["angularFileUpload"]).controller("AppController",["$scope","FileUploader",function($scope,FileUploader){var uploader=$scope.uploader=new FileUploader({url:"upload.php"});uploader.filters.push({name:"customFilter",fn:function(item,options){return this.queue.length<10}}),uploader.onWhenAddingFileFailed=function(item,filter,options){console.info("onWhenAddingFileFailed",item,filter,options)},uploader.onAfterAddingFile=function(fileItem){console.info("onAfterAddingFile",fileItem)},uploader.onAfterAddingAll=function(addedFileItems){console.info("onAfterAddingAll",addedFileItems)},uploader.onBeforeUploadItem=function(item){console.info("onBeforeUploadItem",item)},uploader.onProgressItem=function(fileItem,progress){console.info("onProgressItem",fileItem,progress)},uploader.onProgressAll=function(progress){console.info("onProgressAll",progress)},uploader.onSuccessItem=function(fileItem,response,status,headers){console.info("onSuccessItem",fileItem,response,status,headers)},uploader.onErrorItem=function(fileItem,response,status,headers){console.info("onErrorItem",fileItem,response,status,headers)},uploader.onCancelItem=function(fileItem,response,status,headers){console.info("onCancelItem",fileItem,response,status,headers)},uploader.onCompleteItem=function(fileItem,response,status,headers){console.info("onCompleteItem",fileItem,response,status,headers)},uploader.onCompleteAll=function(){console.info("onCompleteAll")},console.info("uploader",uploader)}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("docs").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Docs",state:"docs",type:"dropdown"}),Menus.addSubMenuItem("topbar","docs",{title:"List Docs",state:"docs.list"}),Menus.addSubMenuItem("topbar","docs",{title:"Create Doc",state:"docs.create"})}]),angular.module("docs").config(["$stateProvider",function($stateProvider){$stateProvider.state("docs",{"abstract":!0,url:"/docs",template:"<ui-view/>"}).state("docs.list",{url:"",templateUrl:"modules/docs/client/views/list-docs.client.view.html"}).state("docs.create",{url:"/create",templateUrl:"modules/docs/client/views/create-doc.client.view.html",data:{roles:["user","admin"]}}).state("docs.view",{url:"/:docId",templateUrl:"modules/docs/client/views/view-doc.client.view.html",data:{roles:[]}}).state("docs.edit",{url:"/:docId/edit",templateUrl:"modules/docs/client/views/edit-doc.client.view.html",data:{roles:["user","admin"]}}).state("results",{url:"/results",templateUrl:"modules/docs/client/views/show-results.client.view.html"}).state("results-init",{url:"/results/:filterId",templateUrl:"modules/docs/client/views/show-results.client.view.html"})}]),angular.module("docs").filter("trustAsResourceUrl",["$sce",function($sce){return function(val){return $sce.trustAsResourceUrl(val)}}]),angular.module("docs").controller("DocsController",["$scope","$rootScope","$stateParams","$location","Authentication","Docs","Tags","Analytics","Service",function($scope,$rootScope,$stateParams,$location,Authentication,Docs,Tags,Analytics,Service){$scope.authentication=Authentication,$scope.filters=[],$scope.total=0,$scope.healthChecked=!1,$scope.economyChecked=!1,$scope.technologyChecked=!1,$scope.developmentChecked=!1,$scope.environmentChecked=!1,$scope.dropSettings={scrollableHeight:"300px",scrollable:!0,displayProp:"tag",idProp:"_id",externalIdProp:"",enableSearch:!0},$scope.selectedTags=[],$scope.healthTopics=["food safety","disease","nutrition","waste"],$scope.economyTopics=["farmers","prices","markets and trade","consumers"],$scope.technologyTopics=["gmos","automation","production methods","computing"],$scope.developmentTopics=["poverty","hunger","sustainability","aid"],$scope.environmentTopics=["water","pollution","land","climate"],$scope.create=function(){var doc=new Docs({title:this.title,description:this.description,type:this.type,url:this.url,thumbnail_image:this.thumbnail_image,tags:$scope.selectedTags,viewCount:0});doc.$save(function(response){$location.path("docs/"+response._id),$scope.title="",$scope.description="",$scope.type="",$scope.url="",$scope.tags="",$scope.selectedTags=[]},function(errorResponse){$scope.error=errorResponse.data.message})},Docs.query(function(data){$scope.thesedocs=data}),$scope.editFilter=function(str){for(var flag=!1,i=0;i<$scope.total;i++)$scope.filters[i]===str&&($scope.filters.splice(i,1),flag=!0,$scope.total--);flag||($scope.filters.push(str),$scope.total++),"health"===str?$scope.healthChecked||$scope.uncheckSubtopics($scope.healthTopics):"economy"===str?$scope.economyChecked||$scope.uncheckSubtopics($scope.economyTopics):"technology"===str?$scope.technologyChecked||$scope.uncheckSubtopics($scope.technologyTopics):"development"===str?$scope.developmentChecked||$scope.uncheckSubtopics($scope.developmentTopics):"environment"===str&&($scope.environmentChecked||$scope.uncheckSubtopics($scope.environmentTopics))},$scope.uncheckSubtopics=function(arr){for(var box,i=0;i<arr.length;i++)for(var j=0;j<$scope.filters.length;j++)arr[i]===$scope.filters[j]&&(box=document.getElementById(arr[i]),box.checked=!1,$scope.filters.splice(j,1),$scope.total--)},$scope.generateDescription=function(doc){var description=doc.description.toString(),new_description="";return new_description=description.length>80?description.substring(0,79)+"...":description},$scope.generateTags=function(doc){for(var tagsList=doc.tags,tags="",new_tags="",i=0;i<tagsList.length;i++)tags+=tagsList[i].tag,i+1!==tagsList.length&&(tags+=", ");return new_tags=tags.length>80?tags.substring(0,79)+"...":tags},$scope.checkFilters=function(doc){for(var flag=!0,tagsList=doc.tags,i=0;i<$scope.total&&flag;i++){flag=!1;for(var j=0;j<tagsList.length;j++)tagsList[j].tag===$scope.filters[i]&&(flag=!0)}return flag},$scope.remove=function(doc){if(doc){doc.$remove();for(var i in $scope.docs)$scope.docs[i]===doc&&$scope.docs.splice(i,1)}else $scope.doc.$remove(function(){$location.path("docs")})},$scope.initialize=function(){1===parseInt($stateParams.filterId)?($scope.healthChecked=!0,$scope.editFilter("health")):2===parseInt($stateParams.filterId)?($scope.economyChecked=!0,$scope.editFilter("economy")):3===parseInt($stateParams.filterId)?($scope.technologyChecked=!0,$scope.editFilter("technology")):4===parseInt($stateParams.filterId)?($scope.developmentChecked=!0,$scope.editFilter("development")):5===parseInt($stateParams.filterId)&&($scope.environmentChecked=!0,$scope.editFilter("environment"))},$scope.removeTag=function(tagId){for(var i=$scope.selectedTags.length-1;i>=0;i--)if($scope.selectedTags[i]._id===tagId){$scope.selectedTags.splice(i,1);break}},$scope.update=function(){var doc=$scope.doc;doc.$update(function(){$location.path("docs/"+doc._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.updateViewCount=function(){var doc=$scope.doc;doc.$updateViewCount(function(response){$location.path("docs/"+response._id+"viewCount")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$stateParams.filterId&&$scope.initialize(),$scope.docs=Docs.query(),$scope.getTags=Tags.query()},$scope.findOne=function(){$scope.doc=Docs.get({docId:$stateParams.docId})},$scope.findOne2=function(){$scope.doc2=Docs.get({docId:$stateParams.docId}).$promise.then(function(doc2){Service.create(doc2)})},$scope.incrementViewCount=function(doc){doc.viewCount+=1,console.log(doc.viewCount),doc.$update(function(response){$location.path("docs/"+response._id),$scope.title="",$scope.description="",$scope.type="",$scope.url="",$scope.tags="",$scope.selectedTags=[]},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("docs").factory("Docs",["$resource",function($resource){return $resource("api/docs/:docId",{docId:"@_id"},{update:{method:"PUT"}})}]),angular.module("analytics").factory("Service",["Analytics",function(Analytics){var Service={create:function(doc){var analytic=new Analytics({doc:doc._id,title:doc.title,tags:doc.tags});analytic.$save(function(response){})}};return Service}]),angular.module("feedback").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Feedback",state:"feedback",type:"dropdown"}),Menus.addSubMenuItem("topbar","feedback",{title:"List Feedback",state:"feedback.list",roles:["admin"]}),Menus.addSubMenuItem("topbar","feedback",{title:"Create Feedback",state:"feedback.create"})}]),angular.module("feedback").config(["$stateProvider",function($stateProvider){$stateProvider.state("feedback",{"abstract":!0,url:"/feedback",template:"<ui-view/>"}).state("feedback.list",{url:"",templateUrl:"modules/feedback/client/views/list-feedback.client.view.html",data:{roles:["admin"]}}).state("feedback.create",{url:"/create",templateUrl:"modules/feedback/client/views/create-feedback.client.view.html"}).state("feedback.view",{url:"/:feedbackId",templateUrl:"modules/feedback/client/views/view-feedback.client.view.html"}).state("feedback.edit",{url:"/:feedbackId/edit",templateUrl:"modules/feedback/client/views/edit-feedback.client.view.html",data:{roles:["admin"]}})}]),angular.module("feedback").controller("FeedbackController",["$scope","$stateParams","$location","Authentication","Feedback",function($scope,$stateParams,$location,Authentication,Feedback){$scope.authentication=Authentication,$scope.create=function(){var feedback=new Feedback({title:this.title,text:this.text});feedback.$save(function(response){$location.path("feedback/"+response._id),$scope.title="",$scope.text=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(feedback){if(feedback){feedback.$remove();for(var i in $scope.feedback)$scope.feedback[i]===feedback&&$scope.feedback.splice(i,1)}else $scope.feedback.$remove(function(){$location.path("feedback")})},$scope.update=function(){var feedback=$scope.feedback;feedback.$update(function(){$location.path("feedback/"+feedback._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.feedback=Feedback.query()},$scope.findOne=function(){$scope.feedback=Feedback.get({feedbackId:$stateParams.feedbackId})}}]),angular.module("feedback").factory("Feedback",["$resource",function($resource){return $resource("api/feedback/:feedbackId",{feedbackId:"@_id"},{update:{method:"PUT"}})}]),angular.module("saved-docs").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Saved Docs",state:"saved-docs",type:"dropdown"}),Menus.addSubMenuItem("topbar","saved-docs",{title:"List Saved Docs",state:"saved-docs.list"})}]),angular.module("saved-docs").config(["$stateProvider",function($stateProvider){$stateProvider.state("saved-docs",{"abstract":!0,url:"/saved-docs",template:"<ui-view/>"}).state("saved-docs.list",{url:"",templateUrl:"modules/saved-docs/client/views/list-saved-docs.client.view.html",data:{roles:["user","admin"]}}).state("saved-docs.view",{url:"/:savedDocId",templateUrl:"modules/saved-docs/client/views/view-saved-doc.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("saved-docs").controller("SavedDocsController",["$scope","$stateParams","$location","Authentication","SavedDocs","$window",function($scope,$stateParams,$location,Authentication,SavedDocs,$window){$scope.authentication=Authentication,this.create=function(newDoc,newTitle,newDescription,newType,newUrl,newThumbnail_image,newTags){var savedDoc=new SavedDocs({doc:newDoc,title:newTitle,description:newDescription,type:newType,url:newUrl,thumbnail_image:newThumbnail_image,tags:newTags});savedDoc.$save(function(response){$window.location.reload()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(savedDoc){if(savedDoc){savedDoc.$remove();for(var i in $scope.savedDocs)$scope.savedDocs[i]===savedDoc&&$scope.savedDocs.splice(i,1)}else $scope.savedDoc.$remove(function(){$location.path("saved-docs")})},$scope.update=function(){var savedDoc=$scope.savedDoc;savedDoc.$update(function(){$location.path("saved-docs/"+savedDoc._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.savedDocs=SavedDocs.query()},$scope.findOne=function(){$scope.savedDoc=SavedDocs.get({savedDocId:$stateParams.savedDocId})},$scope.userMatch=function(authUser){return function(userSavedDoc){return userSavedDoc.user._id===authUser}},this.hasDoc=function(authUser,docId){for(var i=0;i<=$scope.savedDocs.length;++i){if(i===$scope.savedDocs.length)return!1;if(authUser===$scope.savedDocs[i].user._id&&docId===$scope.savedDocs[i].doc)return!0}},this.removeByDocId=function(authUser,docId){for(var i=0;i<$scope.savedDocs.length;i++)String(authUser)===String($scope.savedDocs[i].user._id)&&String(docId)===String($scope.savedDocs[i].doc)&&($scope.savedDocs[i].$remove(),$scope.savedDocs.splice(i,1),window.location.reload())},$scope.docNum=function(authUser){for(var n=0,i=0;i<$scope.savedDocs.length;i++)String(authUser)===String($scope.savedDocs[i].user._id)&&n++;return n}}]),angular.module("saved-docs").factory("SavedDocs",["$resource",function($resource){return $resource("api/saved-docs/:savedDocId",{savedDocId:"@_id"},{update:{method:"PUT"}})}]),angular.module("tags").config(["$stateProvider",function($stateProvider){$stateProvider.state("tags",{"abstract":!0,url:"/admin/tags",template:"<ui-view/>"}).state("tags.list",{url:"",templateUrl:"modules/tags/client/views/list-tags.client.view.html",data:{roles:["admin"]}}).state("tags.create",{url:"/create",templateUrl:"modules/tags/client/views/create-tag.client.view.html",data:{roles:["admin"]}}).state("tags.view",{url:"/:tagId",templateUrl:"modules/tags/client/views/view-tag.client.view.html",data:{roles:["admin"]}}).state("tags.edit",{url:"/:tagId/edit",templateUrl:"modules/tags/client/views/edit-tag.client.view.html",data:{roles:["admin"]}})}]),angular.module("tags").controller("TagsController",["$scope","$stateParams","$location","Authentication","Topics","Tags",function($scope,$stateParams,$location,Authentication,Topics,Tags){$scope.authentication=Authentication,$scope.dropSettings={scrollableHeight:"300px",scrollable:!0,displayProp:"topic",idProp:"_id",externalIdProp:"_id"},$scope.selectedTopics=[],$scope.getTopicName=function(topicId){for(var i=$scope.getTopics.length-1;i>=0;i--)if($scope.getTopics[i]._id===topicId)return $scope.getTopics[i].topic;
},$scope.removeTopic=function(topicId){for(var i=$scope.selectedTopics.length-1;i>=0;i--)if($scope.selectedTopics[i]._id===topicId){$scope.selectedTopics.splice(i,1);break}},$scope.create=function(){var tag=new Tags({tag:this.tag,topicID:$scope.selectedTopics});tag.$save(function(response){$location.path("admin/tags/"+response._id),$scope.tag="",$scope.selectedTopics=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(tag){if(tag){tag.$remove();for(var i in $scope.tags)$scope.tags[i]===tag&&$scope.tags.splice(i,1)}else $scope.tag.$remove(function(){$location.path("/admin/tags")})},$scope.update=function(){var tag=$scope.tag;tag.$update(function(){$location.path("/admin/tags/"+tag._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.tags=Tags.query(),$scope.getTopics=Topics.query()},$scope.findOne=function(){$scope.tag=Tags.get({tagId:$stateParams.tagId})}}]),angular.module("tags").factory("Tags",["$resource",function($resource){return $resource("api/tags/:tagId",{tagId:"@_id"},{update:{method:"PUT"}})}]),angular.module("topics").config(["$stateProvider",function($stateProvider){$stateProvider.state("topics",{"abstract":!0,url:"/topics",template:"<ui-view/>"}).state("topics.list",{url:"",templateUrl:"modules/topics/client/views/list-topics.client.view.html"}).state("topics.create",{url:"/create",templateUrl:"modules/topics/client/views/create-topic.client.view.html"}).state("topics.view",{url:"/:topicId",templateUrl:"modules/topics/client/views/view-topic.client.view.html"}).state("topics.edit",{url:"/:topicId/edit",templateUrl:"modules/topics/client/views/edit-topic.client.view.html"})}]),angular.module("topics").controller("TopicsController",["$scope","$stateParams","$location","Authentication","Topics",function($scope,$stateParams,$location,Authentication,Topics){$scope.authentication=Authentication,$scope.create=function(){var topic=new Topics({name:this.name});topic.$save(function(response){$location.path("topics/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(topic){if(topic){topic.$remove();for(var i in $scope.topics)$scope.topics[i]===topic&&$scope.topics.splice(i,1)}else $scope.topic.$remove(function(){$location.path("topics")})},$scope.update=function(){var topic=$scope.topic;topic.$update(function(){$location.path("topics/"+topic._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.topics=Topics.query()},$scope.findOne=function(){$scope.topic=Topics.get({topicId:$stateParams.topicId})}}]),angular.module("topics").factory("Topics",["$resource",function($resource){return $resource("api/topics/:topicId",{topicId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"}),Menus.addSubMenuItem("topbar","admin",{title:"Analytics",state:"admin.analytics"}),Menus.addSubMenuItem("topbar","admin",{title:"List Tags",state:"tags.list"}),Menus.addSubMenuItem("topbar","admin",{title:"Create Tag",state:"tags.create"}),Menus.addSubMenuItem("topbar","admin",{title:"Add Announcements",state:"admin.announcements"}),Menus.addSubMenuItem("topbar","admin",{title:"Edit About Section",state:"admin.about-edit"}),Menus.addSubMenuItem("topbar","admin",{title:"Edit Contact Section",state:"admin.contact-edit"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.announcements",{url:"/announcements",templateUrl:"modules/announcements/client/views/create-announcement.client.view.html",controller:"AnnouncementsController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.about-edit",{url:"/edit-about",templateUrl:"modules/abouts/client/views/edit-about.client.view.html",controller:"AboutsController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.contact-edit",{url:"/edit-contact",templateUrl:"modules/contacts/client/views/edit-contact.client.view.html",controller:"ContactsController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.analytics",{url:"/analytics",templateUrl:"modules/users/client/views/admin/analytics.client.view.html",controller:"UserListController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$stateParams","$filter","Docs","Tags","Announcements","Admin",function($scope,$stateParams,$filter,Docs,Tags,Announcements,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),Docs.query(function(data){$scope.docs=data,$scope.buildPager()}),Tags.query(function(data){$scope.tags=data,$scope.buildPager()}),Announcements.query(function(data){$scope.announcements=data,$scope.buildPager()}),$scope.find=function(){$scope.docs=Docs.query(),$scope.getTags=Tags.query()},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.docsFiltered=$filter("filter")($scope.docs,{$:$scope.search}),$scope.tagsFiltered=$filter("filter")($scope.tags,{$:$scope.search}),$scope.announcementsFiltered=$filter("filter")($scope.announcements,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.unshift(function(password){var result=PasswordValidator.getResult(password),strengthIdx=0,strengthMeter=[{color:"danger",progress:"25"},{color:"warning",progress:"50"},{color:"primary",progress:"75"},{color:"success",progress:"100"}];strengthMeter.length;return result.errors.length<strengthMeter.length&&(strengthIdx=strengthMeter.length-result.errors.length-1),scope.strengthColor=strengthMeter[strengthIdx].color,scope.strengthProgress=strengthMeter[strengthIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,void modelCtrl.$setValidity("strength",!1)):(scope.popoverMsg="",modelCtrl.$setValidity("strength",!0),password)})}}}]),angular.module("users").directive("passwordVerify",function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,modelCtrl){scope.$watch(function(){var combined;return(scope.passwordVerify||modelCtrl.$viewValue)&&(combined=scope.passwordVerify+"_"+modelCtrl.$viewValue),combined},function(value){value&&modelCtrl.$parsers.unshift(function(viewValue){var origin=scope.passwordVerify;return origin!==viewValue?void modelCtrl.$setValidity("passwordVerify",!1):(modelCtrl.$setValidity("passwordVerify",!0),viewValue)})})}}}),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 6 characters and less than 30 characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);